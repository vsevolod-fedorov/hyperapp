Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> module
Rule 1     module -> ENCODING typedef_list eom
Rule 2     eom -> NEWLINE ENDMARKER
Rule 3     eom -> ENDMARKER
Rule 4     typedef_list -> typedef_list NEWLINE typedef
Rule 5     typedef_list -> typedef
Rule 6     typedef -> NAME EQUAL type_expr
Rule 7     type_expr -> NAME

Terminals, with rules where they appear

ENCODING             : 1
ENDMARKER            : 2 3
EQUAL                : 6
NAME                 : 6 7
NEWLINE              : 2 4
error                : 

Nonterminals, with rules where they appear

eom                  : 1
module               : 0
type_expr            : 6
typedef              : 4 5
typedef_list         : 1 4

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . ENCODING typedef_list eom

    ENCODING        shift and go to state 2

    module                         shift and go to state 1

state 1

    (0) S' -> module .



state 2

    (1) module -> ENCODING . typedef_list eom
    (4) typedef_list -> . typedef_list NEWLINE typedef
    (5) typedef_list -> . typedef
    (6) typedef -> . NAME EQUAL type_expr

    NAME            shift and go to state 5

    typedef_list                   shift and go to state 3
    typedef                        shift and go to state 4

state 3

    (1) module -> ENCODING typedef_list . eom
    (4) typedef_list -> typedef_list . NEWLINE typedef
    (2) eom -> . NEWLINE ENDMARKER
    (3) eom -> . ENDMARKER

    NEWLINE         shift and go to state 8
    ENDMARKER       shift and go to state 7

    eom                            shift and go to state 6

state 4

    (5) typedef_list -> typedef .

    NEWLINE         reduce using rule 5 (typedef_list -> typedef .)
    ENDMARKER       reduce using rule 5 (typedef_list -> typedef .)


state 5

    (6) typedef -> NAME . EQUAL type_expr

    EQUAL           shift and go to state 9


state 6

    (1) module -> ENCODING typedef_list eom .

    $end            reduce using rule 1 (module -> ENCODING typedef_list eom .)


state 7

    (3) eom -> ENDMARKER .

    $end            reduce using rule 3 (eom -> ENDMARKER .)


state 8

    (4) typedef_list -> typedef_list NEWLINE . typedef
    (2) eom -> NEWLINE . ENDMARKER
    (6) typedef -> . NAME EQUAL type_expr

    ENDMARKER       shift and go to state 11
    NAME            shift and go to state 5

    typedef                        shift and go to state 10

state 9

    (6) typedef -> NAME EQUAL . type_expr
    (7) type_expr -> . NAME

    NAME            shift and go to state 12

    type_expr                      shift and go to state 13

state 10

    (4) typedef_list -> typedef_list NEWLINE typedef .

    NEWLINE         reduce using rule 4 (typedef_list -> typedef_list NEWLINE typedef .)
    ENDMARKER       reduce using rule 4 (typedef_list -> typedef_list NEWLINE typedef .)


state 11

    (2) eom -> NEWLINE ENDMARKER .

    $end            reduce using rule 2 (eom -> NEWLINE ENDMARKER .)


state 12

    (7) type_expr -> NAME .

    NEWLINE         reduce using rule 7 (type_expr -> NAME .)
    ENDMARKER       reduce using rule 7 (type_expr -> NAME .)


state 13

    (6) typedef -> NAME EQUAL type_expr .

    NEWLINE         reduce using rule 6 (typedef -> NAME EQUAL type_expr .)
    ENDMARKER       reduce using rule 6 (typedef -> NAME EQUAL type_expr .)

