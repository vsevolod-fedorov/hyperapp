from error import error, client_error
from core import object, object_base, handle
from form import form, form_base
from object_selector import object_selector_callback
from text import text, wiki_ref


blog = record:
    blog_service_ref: ref
    blog_id: string
    current_article_id: int opt

blog_article = record:
    blog_service_ref: ref
    blog_id: string
    article_id: int

blog_article_ref_list = record:
    blog_service_ref: ref
    blog_id: string
    article_id: int
    selected_ref_id: int opt

blog_article_ref_selector = record:
    blog_service_ref: ref
    blog_id: string
    article_id: int
    ref_id: int opt  # none for new ref
    current_piece_ref: ref


blog_item = record:
    id: int
    created_at: datetime
    title: string
    text: string
    ref_list: wiki_ref list

blog_chunk = record:
    from_key: int opt
    items: blog_item list
    eof: bool

unknown_article_error = error class unknown_article(client_error):
    blog_id: string
    article_id: int


blog_service_iface = interface blog_service:
    commands:
        fetch_blog_contents(blog_id: string, from_key: int opt) -> (chunk: blog_chunk)
        create_article(blog_id: string, title: string, text: string) -> (blog_item: blog_item)
        save_article(blog_id: string, article_id: int, title: string, text: string) -> ()
        delete_article(blog_id: string, article_id: int) -> ()
        update_ref(blog_id: string, article_id: int, ref_id: int, title: string, ref: ref) -> ()
        add_ref(blog_id: string, article_id: int, title: string, ref: ref) -> (ref_id: int)
        delete_ref(blog_id: string, article_id: int, ref_id: int) -> ()
        subscribe(blog_id_list: string list, service_ref: ref) -> ()

blog_notification_iface = interface blog_notification:
    commands:
        article_added(blog_id: string, article: blog_item)
        article_changed(blog_id: string, article: blog_item)
        article_deleted(blog_id: string, article_id: int)
